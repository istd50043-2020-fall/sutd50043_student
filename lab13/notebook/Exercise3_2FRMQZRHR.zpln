{
  "paragraphs": [
    {
      "text": "%md\n\n# Exercise 3\n\nIn this exercise, we are going to implement the KMeans clustering algorithm using Spark RDD.\n\nFor parts marked with **[CODE CHANGE REQUIRED]** you need to modify or complete the code before execution.\nFor parts without **[CODE CHANGE REQUIRED]** , you can just run the given code.\n",
      "user": "anonymous",
      "dateUpdated": "2020-11-13 14:04:15.586",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch1\u003eExercise 3\u003c/h1\u003e\n\u003cp\u003eIn this exercise, we are going to implement the KMeans clustering algorithm using Spark RDD.\u003c/p\u003e\n\u003cp\u003eFor parts marked with \u003cstrong\u003e[CODE CHANGE REQUIRED]\u003c/strong\u003e you need to modify or complete the code before execution.\u003cbr /\u003e\nFor parts without \u003cstrong\u003e[CODE CHANGE REQUIRED]\u003c/strong\u003e , you can just run the given code.\u003c/p\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1605147591351_1105074243",
      "id": "paragraph_1604300241188_1434174859",
      "dateCreated": "2020-11-12 10:19:51.351",
      "dateStarted": "2020-11-13 14:03:47.000",
      "dateFinished": "2020-11-13 14:03:47.016",
      "status": "READY"
    },
    {
      "text": "%md\n\n## KMeans clustering algorithm\n\nKMeans clustering algorithm is an unsupervised machine learning algorithm which groups data points into *cluster*s (or groups) based on their similarity, e.g. product their likes, movies their likes, brands they follow, TV programs and movies they watched, university and colleages they attended. \n\nAssume all the attributes of the subjects in the analysis can be represented using some scalar values, we can conduct the analysis in the following steps.\n\n1. The user/programmer specifies how many clusters he/she would like to group all the data points under. Let\u0027s say it is `K`\n2. Randomly generate `K` data points, we call them *centroids*, `c1, c2, ..., cK`.\n3. For each data point `p`, we compute the distances between `p` and `c1`, `p` and `c2`, ... Find the centroid `ci`, to which `p` is closest, we conclude `p` is in cluster `i`.\n4. For each cluster `i`, we retrieve all the data points falling in this cluster, and compute the mean. The mean will be new centroid for cluster `i`, say `ci\u0027`\n5. Compare `c1` with `c1\u0027`, `c2` with `c2\u0027`, ..., `cK` with `cK\u0027`. If all of them remains unchanged (or the differnce is lower than a threshold), we are done. Otherwise, update `c1 \u003d c1\u0027`, ..., `cK \u003d cK` and go back to step 3.\n\n\nPoint to note, clusters might be disappear, i.e. some centroid has zero data point inside. \n\n![](https://i.stack.imgur.com/ibYKU.png)",
      "user": "anonymous",
      "dateUpdated": "2020-11-13 14:03:49.455",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eKMeans clustering algorithm\u003c/h2\u003e\n\u003cp\u003eKMeans clustering algorithm is an unsupervised machine learning algorithm which groups data points into \u003cem\u003ecluster\u003c/em\u003es (or groups) based on their similarity, e.g. product their likes, movies their likes, brands they follow, TV programs and movies they watched, university and colleages they attended.\u003c/p\u003e\n\u003cp\u003eAssume all the attributes of the subjects in the analysis can be represented using some scalar values, we can conduct the analysis in the following steps.\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eThe user/programmer specifies how many clusters he/she would like to group all the data points under. Let\u0026rsquo;s say it is \u003ccode\u003eK\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eRandomly generate \u003ccode\u003eK\u003c/code\u003e data points, we call them \u003cem\u003ecentroids\u003c/em\u003e, \u003ccode\u003ec1, c2, ..., cK\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eFor each data point \u003ccode\u003ep\u003c/code\u003e, we compute the distances between \u003ccode\u003ep\u003c/code\u003e and \u003ccode\u003ec1\u003c/code\u003e, \u003ccode\u003ep\u003c/code\u003e and \u003ccode\u003ec2\u003c/code\u003e, \u0026hellip; Find the centroid \u003ccode\u003eci\u003c/code\u003e, to which \u003ccode\u003ep\u003c/code\u003e is closest, we conclude \u003ccode\u003ep\u003c/code\u003e is in cluster \u003ccode\u003ei\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eFor each cluster \u003ccode\u003ei\u003c/code\u003e, we retrieve all the data points falling in this cluster, and compute the mean. The mean will be new centroid for cluster \u003ccode\u003ei\u003c/code\u003e, say \u003ccode\u003eci\u0027\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eCompare \u003ccode\u003ec1\u003c/code\u003e with \u003ccode\u003ec1\u0027\u003c/code\u003e, \u003ccode\u003ec2\u003c/code\u003e with \u003ccode\u003ec2\u0027\u003c/code\u003e, \u0026hellip;, \u003ccode\u003ecK\u003c/code\u003e with \u003ccode\u003ecK\u0027\u003c/code\u003e. If all of them remains unchanged (or the differnce is lower than a threshold), we are done. Otherwise, update \u003ccode\u003ec1 \u003d c1\u0027\u003c/code\u003e, \u0026hellip;, \u003ccode\u003ecK \u003d cK\u003c/code\u003e and go back to step 3.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003ePoint to note, clusters might be disappear, i.e. some centroid has zero data point inside.\u003c/p\u003e\n\u003cp\u003e\u003cimg src\u003d\"https://i.stack.imgur.com/ibYKU.png\" alt\u003d\"\" /\u003e\u003c/p\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1605147591351_1839145456",
      "id": "paragraph_1604300294607_1616400427",
      "dateCreated": "2020-11-12 10:19:51.352",
      "dateStarted": "2020-11-13 14:03:49.455",
      "dateFinished": "2020-11-13 14:03:49.475",
      "status": "FINISHED"
    },
    {
      "text": "%md\n\nInstead of using real data, we use a python script to generate the data. The python script is already written for you. It can be found in the git-cloned repo `sutd50043_student/lab13/data/ex3/data/generate.py` \n\n```python\nimport sys\nimport random\ndef gen(num_of_records, filename):\n    with open(filename,\u0027w\u0027) as f:\n        for i in range(0,int(num_of_records)):\n            x \u003d random.uniform(-100,100)\n            y \u003d random.uniform(-100,100) \n            f.write(\"%.2f\\t%.2f\\n\" % (x,y))\n    f.close()\n\nif __name__ \u003d\u003d \"__main__\":\n    if len(sys.argv) \u003e 2:\n        sys.exit(gen(sys.argv[1],sys.argv[2]))\n    else:\n        print(\"USAGE: python3 generate.py \u003cnumber_of_records\u003e \u003cfile_name\u003e\")\n```",
      "user": "anonymous",
      "dateUpdated": "2020-11-13 14:04:21.159",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eInstead of using real data, we use a python script to generate the data. The python script is already written for you. It can be found in the git-cloned repo \u003ccode\u003esutd50043_student/lab13/data/ex3/data/generate.py\u003c/code\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class\u003d\"language-python\"\u003eimport sys\nimport random\ndef gen(num_of_records, filename):\n    with open(filename,\u0027w\u0027) as f:\n        for i in range(0,int(num_of_records)):\n            x \u003d random.uniform(-100,100)\n            y \u003d random.uniform(-100,100) \n            f.write(\u0026quot;%.2f\\t%.2f\\n\u0026quot; % (x,y))\n    f.close()\n\nif __name__ \u003d\u003d \u0026quot;__main__\u0026quot;:\n    if len(sys.argv) \u0026gt; 2:\n        sys.exit(gen(sys.argv[1],sys.argv[2]))\n    else:\n        print(\u0026quot;USAGE: python3 generate.py \u0026lt;number_of_records\u0026gt; \u0026lt;file_name\u0026gt;\u0026quot;)\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1605147591352_805793395",
      "id": "paragraph_1604300692325_1199987989",
      "dateCreated": "2020-11-12 10:19:51.352",
      "dateStarted": "2020-11-13 14:04:21.159",
      "dateFinished": "2020-11-13 14:04:21.165",
      "status": "FINISHED"
    },
    {
      "text": "%md\n\n **[CODE CHANGE REQUIRED]**\nModify the bash command in the next cell accordingly to execute the above script.\n\n",
      "user": "anonymous",
      "dateUpdated": "2020-11-13 14:04:23.280",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003e\u003cstrong\u003e[CODE CHANGE REQUIRED]\u003c/strong\u003e\u003cbr /\u003e\nModify the bash command in the next cell accordingly to execute the above script.\u003c/p\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1605147591352_2103767443",
      "id": "paragraph_1604302627135_1473009007",
      "dateCreated": "2020-11-12 10:19:51.352",
      "dateStarted": "2020-11-13 14:04:23.280",
      "dateFinished": "2020-11-13 14:04:23.287",
      "status": "FINISHED"
    },
    {
      "text": "%sh\n\npython3 /home/hadoop/git/sutd50043_student/lab13/data/ex3/generate.py 10000000 points.tsv\npython3 /home/hadoop/git/sutd50043_student/lab13/data/ex3/generate.py 10 centroids.tsv\n",
      "user": "anonymous",
      "dateUpdated": "2020-11-13 14:02:50.228",
      "config": {
        "editorSetting": {
          "language": "sh",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/sh",
        "fontSize": 9.0,
        "results": {},
        "enabled": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1605147591352_1447692092",
      "id": "paragraph_1604302923412_438367352",
      "dateCreated": "2020-11-12 10:19:51.352",
      "dateStarted": "2020-11-13 13:00:15.558",
      "dateFinished": "2020-11-13 13:00:16.006",
      "status": "FINISHED"
    },
    {
      "text": "%md\n## TODO 0\n\n **[CODE CHANGE REQUIRED]**\n \nModify the following bash command and execute it, so that we can upload the points in the HDFS",
      "user": "anonymous",
      "dateUpdated": "2020-11-13 14:04:26.874",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eTODO 0\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003e[CODE CHANGE REQUIRED]\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eModify the following bash command and execute it, so that we can upload the points in the HDFS\u003c/p\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1605147591352_926435914",
      "id": "paragraph_1604303088499_283049258",
      "dateCreated": "2020-11-12 10:19:51.352",
      "dateStarted": "2020-11-13 14:04:26.874",
      "dateFinished": "2020-11-13 14:04:26.880",
      "status": "FINISHED"
    },
    {
      "text": "%sh\n\nexport PATH\u003d$PATH:/opt/hadoop-3.3.0/bin/\nhdfs dfs -mkdir -p /lab13/ex3/input/\nhdfs dfs -put points.tsv /lab13/ex3/input/\n\nhdfs dfs -mkdir -p /lab13/ex3/centroids/\nhdfs dfs -put centroids.tsv /lab13/ex3/centroids/\n",
      "user": "anonymous",
      "dateUpdated": "2020-11-13 14:02:50.233",
      "config": {
        "editorSetting": {
          "language": "sh",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/sh",
        "fontSize": 9.0,
        "results": {},
        "enabled": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1605147591352_1577309962",
      "id": "paragraph_1604303030704_1412370830",
      "dateCreated": "2020-11-12 10:19:51.352",
      "dateStarted": "2020-11-13 13:00:36.878",
      "dateFinished": "2020-11-13 13:00:41.468",
      "status": "FINISHED"
    },
    {
      "text": "%md \n\nWe load the spark session to create the spark context",
      "user": "anonymous",
      "dateUpdated": "2020-11-13 14:04:29.945",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eWe load the spark session to create the spark context\u003c/p\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1605147591352_1306145249",
      "id": "paragraph_1604472421759_1057850216",
      "dateCreated": "2020-11-12 10:19:51.352",
      "dateStarted": "2020-11-13 14:04:29.946",
      "dateFinished": "2020-11-13 14:04:29.950",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\nfrom pyspark.sql import SparkSession\nsparkSession \u003d SparkSession.builder.appName(\"KMeans notebook\").getOrCreate()\nsc \u003d sparkSession.sparkContext",
      "user": "anonymous",
      "dateUpdated": "2020-11-13 14:02:50.238",
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1605147591352_908524346",
      "id": "paragraph_1604470368334_170115562",
      "dateCreated": "2020-11-12 10:19:51.352",
      "dateStarted": "2020-11-13 13:08:12.068",
      "dateFinished": "2020-11-13 13:08:20.883",
      "status": "FINISHED"
    },
    {
      "text": "%md \n\n## TODO 1\n\n **[CODE CHANGE REQUIRED]**\n\nComplete the definition of the following function `load_points_into_rdd`, which load the tsv data into an RDD given the namenode (e.g. `127.0.0.1:9000`) and the HDFS path (e.g. `kmeans/input`) \n\n\u003cstyle\u003e\n    div.hidecode + pre {display: none}\n\u003c/style\u003e\n\u003cscript\u003e\ndoclick\u003dfunction(e) {\n    e.nextSibling.nextSibling.style.display\u003d\"block\";\n}\n\u003c/script\u003e\n\n\u003cdiv class\u003d\"hidecode\" onclick\u003d\"doclick(this);\"\u003e[Show Hint]\u003c/div\u003e\n\n```python\nnamenode \u003d \"127.0.0.1:9000\"\n\ndef load_points_into_rdd(namenode, path): # TODO\n    return sc.textFile(\"hdfs://%s/%s\" % (namenode,path)).map(lambda ln:ln.strip().split(\"\\t\")).map(lambda l:(float(l[0]), float(l[1])))\n```",
      "user": "anonymous",
      "dateUpdated": "2020-11-13 15:27:22.669",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eTODO 1\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003e[CODE CHANGE REQUIRED]\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eComplete the definition of the following function \u003ccode\u003eload_points_into_rdd\u003c/code\u003e, which load the tsv data into an RDD given the namenode (e.g. \u003ccode\u003e127.0.0.1:9000\u003c/code\u003e) and the HDFS path (e.g. \u003ccode\u003ekmeans/input\u003c/code\u003e)\u003c/p\u003e\n\u003cstyle\u003e\n    div.hidecode + pre {display: none}\n\u003c/style\u003e\n\u003cscript\u003e\ndoclick\u003dfunction(e) {\n    e.nextSibling.nextSibling.style.display\u003d\"block\";\n}\n\u003c/script\u003e\n\u003cdiv class\u003d\"hidecode\" onclick\u003d\"doclick(this);\"\u003e[Show Hint]\u003c/div\u003e\n\u003cpre\u003e\u003ccode class\u003d\"language-python\"\u003enamenode \u003d \u0026quot;127.0.0.1:9000\u0026quot;\n\ndef load_points_into_rdd(namenode, path): # TODO\n    return sc.textFile(\u0026quot;hdfs://%s/%s\u0026quot; % (namenode,path)).map(lambda ln:ln.strip().split(\u0026quot;\\t\u0026quot;)).map(lambda l:(float(l[0]), float(l[1])))\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1605147591352_1569433523",
      "id": "paragraph_1604303126395_1074291387",
      "dateCreated": "2020-11-12 10:19:51.352",
      "dateStarted": "2020-11-13 15:27:22.669",
      "dateFinished": "2020-11-13 15:27:22.676",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark \n\nnamenode \u003d \"127.0.0.1:9000\"\n\ndef load_points_into_rdd(namenode, path): # TODO\n    return None\n",
      "user": "anonymous",
      "dateUpdated": "2020-11-13 14:02:50.242",
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1605147591353_531370846",
      "id": "paragraph_1604303992869_883692923",
      "dateCreated": "2020-11-12 10:19:51.353",
      "dateStarted": "2020-11-13 13:08:19.719",
      "dateFinished": "2020-11-13 13:08:20.883",
      "status": "FINISHED"
    },
    {
      "text": "%md\n\n## Test case 1\n\nRun the following you should see, (the actual numeric values might differ, but the structure should be the same) \n```python\n[(61.4, -33.87), (19.57, -20.85), (22.95, -49.32), (42.81, 29.71), (-65.89, -75.57), (13.48, 71.92), (-17.28, -21.7), (1.79, 43.8), (11.58, -32.18), (1.73, -54.43)]\n```\n",
      "user": "anonymous",
      "dateUpdated": "2020-11-13 14:04:47.676",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eTest case 1\u003c/h2\u003e\n\u003cp\u003eRun the following you should see, (the actual numeric values might differ, but the structure should be the same)\u003c/p\u003e\n\u003cpre\u003e\u003ccode class\u003d\"language-python\"\u003e[(61.4, -33.87), (19.57, -20.85), (22.95, -49.32), (42.81, 29.71), (-65.89, -75.57), (13.48, 71.92), (-17.28, -21.7), (1.79, 43.8), (11.58, -32.18), (1.73, -54.43)]\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1605147591353_1457725078",
      "id": "paragraph_1604471712909_75789156",
      "dateCreated": "2020-11-12 10:19:51.353",
      "dateStarted": "2020-11-13 14:04:47.677",
      "dateFinished": "2020-11-13 14:04:47.682",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\n\n# test case 1\npoints \u003d load_points_into_rdd(namenode, \"/lab13/ex3/input\")\npoints.take(10)",
      "user": "anonymous",
      "dateUpdated": "2020-11-13 14:02:50.247",
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://10.11.206.39:4040/jobs/job?id\u003d0"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1605147591353_235974314",
      "id": "paragraph_1604470696760_1475948702",
      "dateCreated": "2020-11-12 10:19:51.353",
      "dateStarted": "2020-11-13 13:08:28.428",
      "dateFinished": "2020-11-13 13:08:30.283",
      "status": "FINISHED"
    },
    {
      "text": "%md \n\n## TODO 2\n **[CODE CHANGE REQUIRED]**\n \nComplete the following function `euc_dist` which compute the euclidean distance between two points\n\n\n$$\neucdist((x_1,y_1),(x_2,y_2)) \u003d \\sqrt{ (x_1 - x_2)^2 + (y_1 - y_2)^2  }\n$$\n",
      "user": "anonymous",
      "dateUpdated": "2020-11-13 15:32:27.590",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eTODO 2\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003e[CODE CHANGE REQUIRED]\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eComplete the following function \u003ccode\u003eeuc_dist\u003c/code\u003e which compute the euclidean distance between two points\u003c/p\u003e\n\u003cp\u003e$$\u003cbr /\u003e\neucdist((x_1,y_1),(x_2,y_2)) \u003d \\sqrt{ (x_1 - x_2)^2 + (y_1 - y_2)^2  }\u003cbr /\u003e\n$$\u003c/p\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1605147591353_1168952124",
      "id": "paragraph_1604472756075_825467179",
      "dateCreated": "2020-11-12 10:19:51.353",
      "dateStarted": "2020-11-13 15:32:27.591",
      "dateFinished": "2020-11-13 15:32:27.595",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\nimport math\ndef euc_dist(p1,p2): \n    \u0027\u0027\u0027\n    inpput\n    p1, p2: points\n    output\n    euclidean distance between p1 and p2\n    \u0027\u0027\u0027\n    # TODO:fixme\n    return 0\n    ",
      "user": "anonymous",
      "dateUpdated": "2020-11-13 14:02:50.252",
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1605147591353_2127282837",
      "id": "paragraph_1604911194211_158067040",
      "dateCreated": "2020-11-12 10:19:51.353",
      "dateStarted": "2020-11-13 13:08:33.311",
      "dateFinished": "2020-11-13 13:08:33.318",
      "status": "FINISHED"
    },
    {
      "text": "%md\n\n## Test case 2\n\nRun the following you should see, \n\n```text\n1.4142135623730951\n```\n",
      "user": "anonymous",
      "dateUpdated": "2020-11-13 14:04:54.816",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eTest case 2\u003c/h2\u003e\n\u003cp\u003eRun the following you should see,\u003c/p\u003e\n\u003cpre\u003e\u003ccode class\u003d\"language-text\"\u003e1.4142135623730951\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1605147591353_1283268654",
      "id": "paragraph_1604911213220_1209819269",
      "dateCreated": "2020-11-12 10:19:51.353",
      "dateStarted": "2020-11-13 14:04:54.816",
      "dateFinished": "2020-11-13 14:04:54.821",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\n\np1 \u003d (3.0, 1.0)\np2 \u003d (2.0, 2.0)\n\neuc_dist(p1,p2)",
      "user": "anonymous",
      "dateUpdated": "2020-11-13 14:02:50.256",
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1605147591353_2132872842",
      "id": "paragraph_1604911209792_50002499",
      "dateCreated": "2020-11-12 10:19:51.353",
      "dateStarted": "2020-11-13 13:08:35.917",
      "dateFinished": "2020-11-13 13:08:35.926",
      "status": "FINISHED"
    },
    {
      "text": "%md \n\n## TODO 3 \n **[CODE CHANGE REQUIRED]**\n \nComplete the following function which computes the mean of of an iterator/list of points.\n\n`mean()` functions takes a plain python iterator of points, not an RDD of points.\nThe mean of two points are defined as \n\n$$\nmean((x_1,y_1),(x_2,y_2)) \u003d (( x_1 + x_2) / 2, (y_1 + y_2) / 2)\n$$\n\n",
      "user": "anonymous",
      "dateUpdated": "2020-11-13 15:32:17.128",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eTODO 3\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003e[CODE CHANGE REQUIRED]\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eComplete the following function which computes the mean of of an iterator/list of points.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003emean()\u003c/code\u003e functions takes a plain python iterator of points, not an RDD of points.\u003cbr /\u003e\nThe mean of two points are defined as\u003c/p\u003e\n\u003cp\u003e$$\u003cbr /\u003e\nmean((x_1,y_1),(x_2,y_2)) \u003d (( x_1 + x_2) / 2, (y_1 + y_2) / 2)\u003cbr /\u003e\n$$\u003c/p\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1605147591353_382683389",
      "id": "paragraph_1604911428871_779336258",
      "dateCreated": "2020-11-12 10:19:51.353",
      "dateStarted": "2020-11-13 15:32:17.129",
      "dateFinished": "2020-11-13 15:32:17.133",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\n\ndef mean(points):\n    \u0027\u0027\u0027\n    input\n    an iterator of points\n    output\n    a point that is the means of all the points in the input. if the input list is empty, return None\n    \u0027\u0027\u0027\n    # TODO: fixme\n    return (0,0)\n    ",
      "user": "anonymous",
      "dateUpdated": "2020-11-13 14:02:50.261",
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1605147591353_171535131",
      "id": "paragraph_1604925023941_1334331625",
      "dateCreated": "2020-11-12 10:19:51.353",
      "dateStarted": "2020-11-13 13:08:38.235",
      "dateFinished": "2020-11-13 13:08:38.243",
      "status": "FINISHED"
    },
    {
      "text": "%md\n\n## Test case 3\n\nRun the following you should see,\n\n```text\n(4,5)\n```\n",
      "user": "anonymous",
      "dateUpdated": "2020-11-13 14:05:00.754",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eTest case 3\u003c/h2\u003e\n\u003cp\u003eRun the following you should see,\u003c/p\u003e\n\u003cpre\u003e\u003ccode class\u003d\"language-text\"\u003e(4,5)\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1605147591353_1566020388",
      "id": "paragraph_1604925149733_448385187",
      "dateCreated": "2020-11-12 10:19:51.353",
      "dateStarted": "2020-11-13 14:05:00.755",
      "dateFinished": "2020-11-13 14:05:00.760",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\npoints \u003d ((x,y) for x in range(0, 10) for y in range(1,11))\n\nmean(points)",
      "user": "anonymous",
      "dateUpdated": "2020-11-13 14:02:50.266",
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1605147591353_1023057501",
      "id": "paragraph_1604925068845_2079747109",
      "dateCreated": "2020-11-12 10:19:51.353",
      "dateStarted": "2020-11-13 13:08:42.116",
      "dateFinished": "2020-11-13 13:08:42.124",
      "status": "FINISHED"
    },
    {
      "text": "%md\n\n## TODO 4\n **[CODE CHANGE REQUIRED]**\nComplete the following function which finds the nearest centroids for each points in the RDD.\n\u003cstyle\u003e\n    div.hidecode + {display: none}\n\u003c/style\u003e\n\u003cscript\u003e\ndoclick\u003dfunction(e) {\n    e.nextSibling.nextSibling.style.display\u003d\"block\";\n}\n\u003c/script\u003e\n\n\u003cdiv class\u003d\"hidecode\" onclick\u003d\"doclick(this);\"\u003e[Show Hint]\u003c/div\u003e\n\n```text\nLet r1 and r2 be RDDs, r1.cartesion(r2) produces the cartesian product of r1 and r2. \nWhen finding the nearest centroid w.r.t to a point from a list of centroids, it is useful to think of it as a reduce operation.\n```\n",
      "user": "anonymous",
      "dateUpdated": "2020-11-13 15:30:52.684",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eTODO 4\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003e[CODE CHANGE REQUIRED]\u003c/strong\u003e\u003cbr /\u003e\nComplete the following function which finds the nearest centroids for each points in the RDD.\u003c/p\u003e\n\u003cstyle\u003e\n    div.hidecode + {display: none}\n\u003c/style\u003e\n\u003cscript\u003e\ndoclick\u003dfunction(e) {\n    e.nextSibling.nextSibling.style.display\u003d\"block\";\n}\n\u003c/script\u003e\n\u003cdiv class\u003d\"hidecode\" onclick\u003d\"doclick(this);\"\u003e[Show Hint]\u003c/div\u003e\n\u003cpre\u003e\u003ccode class\u003d\"language-text\"\u003eLet r1 and r2 be RDDs, r1.cartesion(r2) produces the cartesian product of r1 and r2. \nWhen finding the nearest centroid w.r.t to a point from a list of centroids, it is useful to think of it as a reduce operation.\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1605147591353_125290921",
      "id": "paragraph_1604925533567_2073844019",
      "dateCreated": "2020-11-12 10:19:51.353",
      "dateStarted": "2020-11-13 15:30:52.684",
      "dateFinished": "2020-11-13 15:30:52.688",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\n\ndef nearest(points, centroids):\n    \u0027\u0027\u0027\n    inputs\n    points: an RDD of points\n    centroids: an RDD of the current centroids\n    \n    output:\n    point_and_nearestcentroids : an RDD of pairs, each pair consists of a point and the nearest centroid it belongs to\n    \u0027\u0027\u0027\n    # TODO fixme\n    return None\n   ",
      "user": "anonymous",
      "dateUpdated": "2020-11-13 14:02:50.271",
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1605147591353_1404280594",
      "id": "paragraph_1604925587575_389377723",
      "dateCreated": "2020-11-12 10:19:51.353",
      "dateStarted": "2020-11-13 13:08:46.463",
      "dateFinished": "2020-11-13 13:08:46.472",
      "status": "FINISHED"
    },
    {
      "text": "%md\n## Test Case 4\n\nRun the following you should see, (the actual numeric values might differ, but the structure should be the same)\n\n\n```text\n\n[((31.34, 39.54), (10.94, 64.76)), ((63.18, -54.98), (78.66, -91.58)), ((-96.53, 54.69), (-53.93, 76.38)), ((-89.91, 9.5), (-42.27, 24.16)), ((95.43, 57.26), (10.94, 64.76)), ((74.38, -61.52), (78.66, -91.58)), ((77.21, -69.08), (78.66, -91.58)), ((-84.04, -74.41), (11.81, -27.94)), ((7.44, 45.33), (10.94, 64.76)), ((30.63, 52.08), (10.94, 64.76))]\n```",
      "user": "anonymous",
      "dateUpdated": "2020-11-13 14:05:06.357",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eTest Case 4\u003c/h2\u003e\n\u003cp\u003eRun the following you should see, (the actual numeric values might differ, but the structure should be the same)\u003c/p\u003e\n\u003cpre\u003e\u003ccode class\u003d\"language-text\"\u003e\n[((31.34, 39.54), (10.94, 64.76)), ((63.18, -54.98), (78.66, -91.58)), ((-96.53, 54.69), (-53.93, 76.38)), ((-89.91, 9.5), (-42.27, 24.16)), ((95.43, 57.26), (10.94, 64.76)), ((74.38, -61.52), (78.66, -91.58)), ((77.21, -69.08), (78.66, -91.58)), ((-84.04, -74.41), (11.81, -27.94)), ((7.44, 45.33), (10.94, 64.76)), ((30.63, 52.08), (10.94, 64.76))]\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1605147591353_734494584",
      "id": "paragraph_1604925635506_94905254",
      "dateCreated": "2020-11-12 10:19:51.354",
      "dateStarted": "2020-11-13 14:05:06.357",
      "dateFinished": "2020-11-13 14:05:06.363",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\n\npoints \u003d load_points_into_rdd(namenode, \"/lab13/ex3/input\")\ncentroids \u003d load_points_into_rdd(namenode, \"/lab13/ex3/centroids\")\n\nnearest(points, centroids).take(10)",
      "user": "anonymous",
      "dateUpdated": "2020-11-13 14:02:50.277",
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://10.11.206.39:4040/jobs/job?id\u003d1"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1605147591354_53677032",
      "id": "paragraph_1604925653513_1532948632",
      "dateCreated": "2020-11-12 10:19:51.354",
      "dateStarted": "2020-11-13 13:08:49.209",
      "dateFinished": "2020-11-13 13:08:49.927",
      "status": "FINISHED"
    },
    {
      "text": "%md\n\n## TODO 5\n\n **[CODE CHANGE REQUIRED]**\n\nComplete the following function which executes one iteration of the K-Means algorithm.\n\n\u003cstyle\u003e\n    div.hidecode + pre {display: none}\n\u003c/style\u003e\n\u003cscript\u003e\ndoclick\u003dfunction(e) {\n    e.nextSibling.nextSibling.style.display\u003d\"block\";\n}\n\u003c/script\u003e\n\n\u003cdiv class\u003d\"hidecode\" onclick\u003d\"doclick(this);\"\u003e[Show Hint]\u003c/div\u003e\n\n```text\nRecall the difference between reduceByKey and groupByKey\n```",
      "user": "anonymous",
      "dateUpdated": "2020-11-13 15:31:24.891",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eTODO 5\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003e[CODE CHANGE REQUIRED]\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eComplete the following function which executes one iteration of the K-Means algorithm.\u003c/p\u003e\n\u003cstyle\u003e\n    div.hidecode + pre {display: none}\n\u003c/style\u003e\n\u003cscript\u003e\ndoclick\u003dfunction(e) {\n    e.nextSibling.nextSibling.style.display\u003d\"block\";\n}\n\u003c/script\u003e\n\u003cdiv class\u003d\"hidecode\" onclick\u003d\"doclick(this);\"\u003e[Show Hint]\u003c/div\u003e\n\u003cpre\u003e\u003ccode class\u003d\"language-text\"\u003eRecall the difference between reduceByKey and groupByKey\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1605147591354_1249825011",
      "id": "paragraph_1604925769574_1522232337",
      "dateCreated": "2020-11-12 10:19:51.354",
      "dateStarted": "2020-11-13 15:31:24.892",
      "dateFinished": "2020-11-13 15:31:24.896",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\n\n    \ndef iteration(points, centroids):\n    \u0027\u0027\u0027\n    inputs\n    points: an RDD of points\n    centroids: an RDD of the current centroids\n    \n    output\n    current_and_new_centroids: an RDD of pairs, each pair consists of a current centroid and the new centroid\n    \u0027\u0027\u0027\n    # Step a: for each point, compute the euclidean_dinstance with each centroid, find the nearest centroid\n    point_and_nearcentroids \u003d nearest(points, centroids)\n    # Step b: flip the pairs from step b, and create an RDD of nearest centroid and points (note: the nearest centroids are still the current centroids)\n    # TODO fixme\n    nearcentroid_and_points \u003d None\n  \n    # Step c: compute the new centroids\n    # TODO fixme\n    current_and_newcentroids \u003d None\n   \n    return current_and_newcentroids\n    \n\n    ",
      "user": "anonymous",
      "dateUpdated": "2020-11-13 14:02:50.281",
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1605147591354_568918986",
      "id": "paragraph_1604471832429_328831829",
      "dateCreated": "2020-11-12 10:19:51.354",
      "dateStarted": "2020-11-13 13:08:53.258",
      "dateFinished": "2020-11-13 13:08:53.266",
      "status": "FINISHED"
    },
    {
      "text": "%md\n\n## Test case 5\n\nRun the following you should see, (the actual numeric values might differ, but the structure should be the same)\n\n```text\n[((-42.27, 24.16), (-63.50617346938779, -4.715561224489797)), ((34.19, -5.47), (65.24037313432835, 4.253208955223882)), ((73.78, -94.16), (43.22766666666668, -84.53166666666665)), ((78.66, -91.58), (83.09037735849053, -62.727924528301884)), ((11.81, -27.94), (-18.85223809523809, -62.081285714285706)), ((-55.65, 97.37), (-42.820499999999996, 94.566)), ((11.1, 2.86), (8.047450980392156, 10.851764705882351)), ((10.94, 64.76), (38.894331550802164, 69.78598930481279)), ((-68.4, 93.57), (-83.12192307692308, 83.44)), ((-53.93, 76.38), (-56.9511111111111, 63.98825396825399))]\n```",
      "user": "anonymous",
      "dateUpdated": "2020-11-13 14:05:11.850",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eTest case 5\u003c/h2\u003e\n\u003cp\u003eRun the following you should see, (the actual numeric values might differ, but the structure should be the same)\u003c/p\u003e\n\u003cpre\u003e\u003ccode class\u003d\"language-text\"\u003e[((-42.27, 24.16), (-63.50617346938779, -4.715561224489797)), ((34.19, -5.47), (65.24037313432835, 4.253208955223882)), ((73.78, -94.16), (43.22766666666668, -84.53166666666665)), ((78.66, -91.58), (83.09037735849053, -62.727924528301884)), ((11.81, -27.94), (-18.85223809523809, -62.081285714285706)), ((-55.65, 97.37), (-42.820499999999996, 94.566)), ((11.1, 2.86), (8.047450980392156, 10.851764705882351)), ((10.94, 64.76), (38.894331550802164, 69.78598930481279)), ((-68.4, 93.57), (-83.12192307692308, 83.44)), ((-53.93, 76.38), (-56.9511111111111, 63.98825396825399))]\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1605147591354_970328134",
      "id": "paragraph_1604926520939_372587766",
      "dateCreated": "2020-11-12 10:19:51.354",
      "dateStarted": "2020-11-13 14:05:11.851",
      "dateFinished": "2020-11-13 14:05:11.856",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\n\npoints \u003d load_points_into_rdd(namenode, \"/lab13/ex3/input\")\ncentroids \u003d load_points_into_rdd(namenode, \"/lab13/ex3/centroids\")\nr \u003d iteration(points,centroids)\nr.take(10)",
      "user": "anonymous",
      "dateUpdated": "2020-11-13 14:02:50.286",
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://10.11.206.39:4040/jobs/job?id\u003d2"
            },
            {
              "jobUrl": "http://10.11.206.39:4040/jobs/job?id\u003d3"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1605147591354_1889407516",
      "id": "paragraph_1604473598116_1344787227",
      "dateCreated": "2020-11-12 10:19:51.354",
      "dateStarted": "2020-11-13 13:08:56.584",
      "dateFinished": "2020-11-13 13:08:57.021",
      "status": "FINISHED"
    },
    {
      "text": "%md \n\n## KMeans \n\nTo define KMeans, we just need two more actions, \n\n1. `forAll(rdd,p)` which checks whether all elements in `rdd` satisfy the predicate `p`.\n2. `no_change(no_change(centroid_and_newcentroids,tolerance)` which applies a conditional check to all pairs of current and new centroids. It yields True if none of the new centroids is `None`, and the euclidean distances between the currents and new centroids are less than the tolerance.\n\n\n",
      "user": "anonymous",
      "dateUpdated": "2020-11-13 14:05:14.401",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eKMeans\u003c/h2\u003e\n\u003cp\u003eTo define KMeans, we just need two more actions,\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003ccode\u003eforAll(rdd,p)\u003c/code\u003e which checks whether all elements in \u003ccode\u003erdd\u003c/code\u003e satisfy the predicate \u003ccode\u003ep\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eno_change(no_change(centroid_and_newcentroids,tolerance)\u003c/code\u003e which applies a conditional check to all pairs of current and new centroids. It yields True if none of the new centroids is \u003ccode\u003eNone\u003c/code\u003e, and the euclidean distances between the currents and new centroids are less than the tolerance.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1605147591354_1174717467",
      "id": "paragraph_1604926615117_703818171",
      "dateCreated": "2020-11-12 10:19:51.354",
      "dateStarted": "2020-11-13 14:05:14.401",
      "dateFinished": "2020-11-13 14:05:14.406",
      "status": "FINISHED"
    },
    {
      "text": "%md\n### TODO 6\n\nComplete the `forAll` function. You don\u0027t need to change `no_change` function. \n\n **[CODE CHANGE REQUIRED]**\n\nComplete the following function which executes one iteration of the K-Means algorithm.\n\n\u003cstyle\u003e\n    div.hidecode + pre {display: none}\n\u003c/style\u003e\n\u003cscript\u003e\ndoclick\u003dfunction(e) {\n    e.nextSibling.nextSibling.style.display\u003d\"block\";\n}\n\u003c/script\u003e\n\n\u003cdiv class\u003d\"hidecode\" onclick\u003d\"doclick(this);\"\u003e[Show Hint]\u003c/div\u003e\n\n```text\nYou can implement it using \n\n1. the aggregate function or\n2. map and reduce functions.\n\n```\n",
      "user": "anonymous",
      "dateUpdated": "2020-11-13 15:31:50.418",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eTODO 6\u003c/h3\u003e\n\u003cp\u003eComplete the \u003ccode\u003eforAll\u003c/code\u003e function. You don\u0026rsquo;t need to change \u003ccode\u003eno_change\u003c/code\u003e function.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e[CODE CHANGE REQUIRED]\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eComplete the following function which executes one iteration of the K-Means algorithm.\u003c/p\u003e\n\u003cstyle\u003e\n    div.hidecode + pre {display: none}\n\u003c/style\u003e\n\u003cscript\u003e\ndoclick\u003dfunction(e) {\n    e.nextSibling.nextSibling.style.display\u003d\"block\";\n}\n\u003c/script\u003e\n\u003cdiv class\u003d\"hidecode\" onclick\u003d\"doclick(this);\"\u003e[Show Hint]\u003c/div\u003e\n\u003cpre\u003e\u003ccode class\u003d\"language-text\"\u003eYou can implement it using \n\n1. the aggregate function or\n2. map and reduce functions.\n\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1605242726423_664724582",
      "id": "paragraph_1605242726423_664724582",
      "dateCreated": "2020-11-13 12:45:26.423",
      "dateStarted": "2020-11-13 15:31:50.418",
      "dateFinished": "2020-11-13 15:31:50.422",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\n\ndef forAll(rdd, p):\n    \u0027\u0027\u0027\n    input:\n    rdd : an RDD\n    p : a predicate, a lambda function that takes a value and return a boolean. p will be applied to all elements in rdd\n    \n    output:\n    True or False\n    \u0027\u0027\u0027\n    # TODO: fixme\n    return False\n   \n\n\ndef no_change(centroid_and_newcentroids,tolerance):\n    return forAll(centroid_and_newcentroids, lambda p:  p[1] is not None and euc_dist(p[0], p[1]) \u003c tolerance)\n",
      "user": "anonymous",
      "dateUpdated": "2020-11-13 14:02:50.293",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python",
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1605242543775_1217462354",
      "id": "paragraph_1605242543775_1217462354",
      "dateCreated": "2020-11-13 12:42:23.775",
      "dateStarted": "2020-11-13 13:09:00.342",
      "dateFinished": "2020-11-13 13:09:00.348",
      "status": "FINISHED"
    },
    {
      "text": "%md\n\n### Test Case 6\n\nRun the following, we should see `True`\n",
      "user": "anonymous",
      "dateUpdated": "2020-11-13 14:05:19.894",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eTest Case 6\u003c/h3\u003e\n\u003cp\u003eRun the following, we should see \u003ccode\u003eTrue\u003c/code\u003e\u003c/p\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1605242853968_1069644759",
      "id": "paragraph_1605242853968_1069644759",
      "dateCreated": "2020-11-13 12:47:33.969",
      "dateStarted": "2020-11-13 14:05:19.894",
      "dateFinished": "2020-11-13 14:05:19.899",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\n\ntest_vs \u003d sc.parallelize([2,4,0,6])\nforAll(test_vs ,lambda x:x % 2 \u003d\u003d 0)",
      "user": "anonymous",
      "dateUpdated": "2020-11-13 14:02:50.299",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python",
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1605242844186_723030809",
      "id": "paragraph_1605242844186_723030809",
      "dateCreated": "2020-11-13 12:47:24.187",
      "dateStarted": "2020-11-13 13:03:08.166",
      "dateFinished": "2020-11-13 13:03:08.223",
      "status": "FINISHED"
    },
    {
      "text": "%md\nLastly, the `kmeans` function is defined by a for-loop in which \n\n1. we call `iteration` to compute the new centroids, \n2. then check whether there is any change between the current and new centroids via `no_change`. \n    2.1. If there is changes, it goes back to the loop by sending the new centroids to be current centroids, \n    2.2. otherwise it exits the loop and compute the membership between the points and the lastest centroids.\n\nNote the use of `.persist()`. try to re-run it again by commenting away the statements using `.persist()`, it will take a longer time to converge.\n\nThe code is written for you, you don\u0027t need to change anything unless you want to experiement with `.persist()` and without.",
      "user": "anonymous",
      "dateUpdated": "2020-11-13 14:05:22.357",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eLastly, the \u003ccode\u003ekmeans\u003c/code\u003e function is defined by a for-loop in which\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003ewe call \u003ccode\u003eiteration\u003c/code\u003e to compute the new centroids,\u003c/li\u003e\n\u003cli\u003ethen check whether there is any change between the current and new centroids via \u003ccode\u003eno_change\u003c/code\u003e.\u003cbr /\u003e\n2.1. If there is changes, it goes back to the loop by sending the new centroids to be current centroids,\u003cbr /\u003e\n2.2. otherwise it exits the loop and compute the membership between the points and the lastest centroids.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eNote the use of \u003ccode\u003e.persist()\u003c/code\u003e. try to re-run it again by commenting away the statements using \u003ccode\u003e.persist()\u003c/code\u003e, it will take a longer time to converge.\u003c/p\u003e\n\u003cp\u003eThe code is written for you, you don\u0026rsquo;t need to change anything unless you want to experiement with \u003ccode\u003e.persist()\u003c/code\u003e and without.\u003c/p\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1605242521609_40258181",
      "id": "paragraph_1605242521609_40258181",
      "dateCreated": "2020-11-13 12:42:01.609",
      "dateStarted": "2020-11-13 14:05:22.357",
      "dateFinished": "2020-11-13 14:05:22.364",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\n\n\ndef kmeans(points, centroids, num_iters, tolerance\u003d2):\n    points.persist()\n    for i in range(0, num_iters):\n        centroid_and_newcentroids \u003d iteration(points,centroids)\n        if no_change(centroid_and_newcentroids,tolerance):\n            break;\n        centroids \u003d centroid_and_newcentroids.map(lambda p:p[1]).filter(lambda c: c is not None)\n        centroids.persist()\n        # print(i,centroids.collect())\n    \n    return nearest(points, centroids)\n    \n    \n        ",
      "user": "anonymous",
      "dateUpdated": "2020-11-13 14:02:50.304",
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1605147591354_1093641926",
      "id": "paragraph_1604542167306_468497878",
      "dateCreated": "2020-11-12 10:19:51.354",
      "dateStarted": "2020-11-13 13:09:05.116",
      "dateFinished": "2020-11-13 13:09:05.122",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\n\npoints \u003d load_points_into_rdd(namenode, \"/lab13/ex3/input\")\ncentroids \u003d load_points_into_rdd(namenode, \"/lab13/ex3/centroids\")\n\nclusters \u003d kmeans(points, centroids, 100, 2)\n\nclusters.take(100)",
      "user": "anonymous",
      "dateUpdated": "2020-11-13 14:02:50.307",
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1605147591354_296585573",
      "id": "paragraph_1604926949574_943969476",
      "dateCreated": "2020-11-12 10:19:51.354",
      "dateStarted": "2020-11-13 13:09:07.829",
      "dateFinished": "2020-11-13 13:10:20.827",
      "status": "FINISHED"
    },
    {
      "text": "%md\n\n## modify and run the following to clean up the HDFS\n\n **[CODE CHANGE REQUIRED]**",
      "user": "anonymous",
      "dateUpdated": "2020-11-13 14:05:26.464",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003emodify and run the following to clean up the HDFS\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003e[CODE CHANGE REQUIRED]\u003c/strong\u003e\u003c/p\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1605147591354_1540846505",
      "id": "paragraph_1604303996114_657466269",
      "dateCreated": "2020-11-12 10:19:51.354",
      "dateStarted": "2020-11-13 14:05:26.464",
      "dateFinished": "2020-11-13 14:05:26.469",
      "status": "FINISHED"
    },
    {
      "text": "%sh\n/opt/hadoop-3.3.0/bin/hdfs dfs -rm -r /lab13/ex3/\n",
      "user": "anonymous",
      "dateUpdated": "2020-11-13 14:05:28.933",
      "config": {
        "editorSetting": {
          "language": "sh",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/sh",
        "fontSize": 9.0,
        "results": {},
        "enabled": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "ERROR",
        "msg": [
          {
            "type": "TEXT",
            "data": "bash: /opt/hadoop-3.3.0/bin/hdfs: No such file or directory\n"
          },
          {
            "type": "TEXT",
            "data": "ExitValue: 127"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1605147591354_1062619106",
      "id": "paragraph_1604303850030_1635476743",
      "dateCreated": "2020-11-12 10:19:51.354",
      "dateStarted": "2020-11-13 14:05:28.936",
      "dateFinished": "2020-11-13 14:05:29.665",
      "status": "ERROR"
    },
    {
      "text": "%pyspark\nsc.stop()",
      "user": "anonymous",
      "dateUpdated": "2020-11-13 14:02:50.315",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python",
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1605147591354_964799497",
      "id": "paragraph_1604471450955_336932916",
      "dateCreated": "2020-11-12 10:19:51.355",
      "dateStarted": "2020-11-13 13:29:26.869",
      "dateFinished": "2020-11-13 13:29:30.778",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\n",
      "user": "anonymous",
      "dateUpdated": "2020-11-13 14:02:50.317",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python",
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1605245366868_1675704294",
      "id": "paragraph_1605245366868_1675704294",
      "dateCreated": "2020-11-13 13:29:26.868",
      "status": "READY"
    }
  ],
  "name": "Exercise3",
  "id": "2FRMQZRHR",
  "defaultInterpreterGroup": "spark",
  "version": "0.9.0-preview2",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {},
  "config": {
    "isZeppelinNotebookCronEnable": false
  },
  "info": {}
}